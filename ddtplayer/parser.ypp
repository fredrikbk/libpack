%{
#include <ddt_jit.hpp>
#include <hrtimer.h>

#include <mpi.h>
#include <stdio.h>
#include <assert.h>

#include <vector>
#include <queue>
#include <list>
#include <algorithm>

#include "ddtplayer.hpp"

using namespace std;

struct Index {
	long displ;
	int blocklen;
};

struct Indices {
	vector<struct Index *> indices;
};

struct Range {
    int start;
    int stop;
    int stride;
};


Datatypes *createVecs(int count_start, int count_stop, int count_stride,
                      int blen_start, int blen_stop, int blen_stride,
                      int stride_start, int stride_stop, int stride_stride,
                      list<struct Datatype> *subtypes,
                      bool isHvector);
%}

%union {
	int val;
	struct Datatypes *types;

	struct Index *index;
	struct Indices *indices;

	struct {
		int start;
		int stop;
		int stride;
	} range;
};

%token <val> NUM
%token <sym> UNKNOWN SUBTYPE ELEM
%token <sym> CONTIGUOUS VECTOR HVECTOR HINDEXED INDEXEDBLOCK STRUCT RESIZED
%token <sym> BYTE_ CHAR_ INT_ DOUBLE_ FLOAT_

%type <types>   datatype primitive derived contiguous vector hvector hindexed indexedblock resized
%type <indices> idxentries leftidxentry idxbentries leftidxbentry
%type <index>   idxentry idxbentry
%type <range>   range

%start input

%%

input:
topdatatype
| input topdatatype 
;

topdatatype:
datatype {
	datatypes.insert( datatypes.end(), $1->types.begin(), $1->types.end() );
	free($1);
}
;

datatype:
primitive |
derived
;

primitive:
BYTE_ {
	$$ = new Datatypes;
	struct Datatype datatype;
	datatype.farc = new farc::PrimitiveDatatype(farc::PrimitiveDatatype::BYTE);
	datatype.mpi  = MPI_BYTE;
	$$->types.push_back(datatype);
}
| CHAR_ {
	$$ = new Datatypes;
	struct Datatype datatype;
	datatype.farc = new farc::PrimitiveDatatype(farc::PrimitiveDatatype::CHAR);
	datatype.mpi  = MPI_CHAR;
	$$->types.push_back(datatype);
}
| INT_ {
	$$ = new Datatypes;
	struct Datatype datatype;
	datatype.farc = new farc::PrimitiveDatatype(farc::PrimitiveDatatype::INT);
	datatype.mpi  = MPI_INT;
	$$->types.push_back(datatype);
}
| FLOAT_ {
	$$ = new Datatypes;
	struct Datatype datatype;
	datatype.farc = new farc::PrimitiveDatatype(farc::PrimitiveDatatype::FLOAT);
	datatype.mpi  = MPI_FLOAT;
	$$->types.push_back(datatype);
}
| DOUBLE_ {
	$$ = new Datatypes;
	struct Datatype datatype;
	datatype.farc = new farc::PrimitiveDatatype(farc::PrimitiveDatatype::DOUBLE);
	datatype.mpi  = MPI_DOUBLE;
	$$->types.push_back(datatype);
}
;

derived:
contiguous
| vector
| hvector
| indexedblock
| hindexed
| resized
;

range:
NUM {
	$$.start = $1;
	$$.stride = 1;
	$$.stop = $1;
}
| NUM ':' NUM ':' NUM {
	$$.start = $1;
	$$.stride = $3;
	$$.stop = $5;
}

contiguous:
CONTIGUOUS '(' range ')' '[' datatype ']' {
	$$ = new Datatypes;

	list<struct Datatype> *subtypes = &($6->types);
	list<struct Datatype> *types = &($$->types);

	for(list<struct Datatype>::iterator subtype = subtypes->begin();
		subtype != subtypes->end(); subtype++) {
		for (int count=$3.start; count <= $3.stop; count += $3.stride) {
			Datatype type;
			type.farc = new farc::ContiguousDatatype(count, subtype->farc);
			MPI_Type_contiguous(count, subtype->mpi, &(type.mpi));
			types->push_back(type);
		}
	}

	free($6);
}
;

vector:
VECTOR '(' range range range ')' '[' datatype ']' { 
    $$ = createVecs($3.start, $3.stop, $3.stride,
                    $4.start, $4.stop, $4.stride,
                    $5.start, $5.stop, $5.stride,
                    &($8->types), false);
	free($8);
}
| VECTOR '(' range ',' range ',' range ')' '[' datatype ']' { 
    $$ = createVecs($3.start, $3.stop, $3.stride,
                    $5.start, $5.stop, $5.stride,
                    $7.start, $7.stop, $7.stride,
                    &($10->types), false);
	free($10);
}
;

hvector:
HVECTOR '(' range range range ')' '[' datatype ']' {
    $$ = createVecs($3.start, $3.stop, $3.stride,
                    $4.start, $4.stop, $4.stride,
                    $5.start, $5.stop, $5.stride,
                    &($8->types), true);
	free($8);
}
| HVECTOR '(' range ',' range ',' range ')' '[' datatype ']' {
    $$ = createVecs($3.start, $3.stop, $3.stride,
                    $5.start, $5.stop, $5.stride,
                    $7.start, $7.stop, $7.stride,
                    &($10->types), true);
	free($10);
}
;

idxbentry:
NUM {
	$$ = new Index;
	$$->displ = $1;
}
;

leftidxbentry:
/* empty */ {
    $$ = new Indices;
}
| idxbentries {
    $$ = $1;
}
| idxbentries ',' {
    $$ = $1;
}
;

idxbentries:
leftidxbentry idxbentry {
	$$ = $1;
	$$->indices.push_back($2);
}
;

indexedblock:
INDEXEDBLOCK '(' NUM ':' idxbentries ')' '[' datatype ']' {
	$$ = new Datatypes;

	list<struct Datatype> *subtypes = &($8->types);
	list<struct Datatype> *types = &($$->types);

	unsigned int num = $5->indices.size();
	int *displs = (int*)malloc(num * sizeof(int));

	for(int i=0; i<num; i++) {
		displs[i] = $5->indices[i]->displ;
		free($5->indices[i]);
	}
	free($5);

	for(list<struct Datatype>::iterator subtype = subtypes->begin();
		subtype != subtypes->end(); subtype++) {
		Datatype type;
		type.farc = new farc::IndexedBlockDatatype(num, $3, displs, subtype->farc);
		MPI_Type_create_indexed_block(num, $3, displs, subtype->mpi, &(type.mpi));
		types->push_back(type);
	}

	free(displs);
	free($8);
}
;

idxentry:
NUM ',' NUM {
	$$ = new Index;
	$$->displ = $1;
	$$->blocklen = $3;
}
;

leftidxentry:
/* empty*/ {
    $$ = new Indices;
}
| idxentries {
    $$ = $1;
}
| idxentries ';' {
    $$ = $1;
}
;

idxentries:
leftidxentry idxentry {
	$$ = $1;
	$$->indices.push_back($2);
}
;

hindexed:
HINDEXED '(' idxentries ')' '[' datatype ']' {
	$$ = new Datatypes;

	list<struct Datatype> *subtypes = &($6->types);
	list<struct Datatype> *types = &($$->types);

	unsigned int num = $3->indices.size();
	long *displs = (long*)malloc(num * sizeof(long));
	int *blocklens = (int*)malloc(num * sizeof(int));

	for(int i=0; i<num; i++) {
		displs[i] = $3->indices[i]->displ;
		blocklens[i] = $3->indices[i]->blocklen;
		free($3->indices[i]);
	}
	free($3);

	for(list<struct Datatype>::iterator subtype = subtypes->begin();
		subtype != subtypes->end(); subtype++) {
		Datatype type;
		type.farc = new farc::HIndexedDatatype(num, blocklens, displs, subtype->farc);
		MPI_Type_hindexed(num, blocklens, displs, subtype->mpi, &(type.mpi));
		types->push_back(type);
	}

	free(displs);
	free(blocklens);
	free($6);
}
;

resized:
RESIZED '(' NUM ',' NUM ')' '[' datatype ']' {
	$$ = new Datatypes;

	list<struct Datatype> *subtypes = &($8->types);
	list<struct Datatype> *types = &($$->types);

	for(list<struct Datatype>::iterator subtype = subtypes->begin();
		subtype != subtypes->end(); subtype++) {

		int lb = $3;
		int extent = $5;

		Datatype type;
		type.farc = new farc::ResizedDatatype(subtype->farc, lb, extent);
		MPI_Type_create_resized(subtype->mpi, lb, extent, &(type.mpi));
		types->push_back(type);
		
	}

	free($8);
}
;


%%

void yyerror(const char *s) {
	fprintf (stderr, "Error: %s\n", s);
}

Datatypes *createVecs(int count_start, int count_stop, int count_stride,
                      int blen_start, int blen_stop, int blen_stride,
                      int stride_start, int stride_stop, int stride_stride,
                      list<struct Datatype> *subtypes,
                      bool isHvector) {
	Datatypes *ret = new Datatypes;

	list<struct Datatype> *types = &(ret->types);

	for(list<struct Datatype>::iterator subtype = subtypes->begin();
		subtype != subtypes->end(); subtype++) {
		for (int count=count_start; count <= count_stop; count += count_stride) {
			for (int blen=blen_start; blen <= blen_stop; blen += blen_stride) {
				for (int stride=stride_start; stride <= stride_stop; stride += stride_stride) {
					Datatype type;
                    if (isHvector)
                    {
                        type.farc = new farc::HVectorDatatype(count, blen,
                                                              stride, subtype->farc);
                        MPI_Type_hvector(count, blen, stride,
                                         subtype->mpi, &(type.mpi));

                    }
                    else {
                        type.farc =new farc::VectorDatatype(count, blen,
                                                            stride, subtype->farc);
                        MPI_Type_vector(count, blen, stride,
                                        subtype->mpi, &(type.mpi));
                    }
					types->push_back(type);
				}
			}
		}
	}

    return ret;
}

